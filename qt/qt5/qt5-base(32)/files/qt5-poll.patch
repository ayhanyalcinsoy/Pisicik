commit 8a2d9073e959356808ce1685822b839d880e6498
Author: Florian Weimer <fweimer@redhat.com>
Date:   Fri Sep 14 17:27:35 2012 +0200

    Replace most calls to select(2) with poll(2)
    
    select(2) limits the number of file descriptor in a process to
    FD_SETSIZE (typically 1023).  Process creation and certain socket
    operations fail because they call select(2) on a file descriptor outside
    the FD_SETSIZE range.
    
    The remaining select(2) calls are used for timeouts only, or are in the
    traditional event loop.  The glib-based event loop does not use
    select(2), so this should be sufficient.
    
    This change adds a poll emulation for VxWorks, which only offers
    select(2).
    
    Change-Id: I9b0cf5bec81da70b29c501c62d14fb57df87fa61

diff --git a/src/corelib/kernel/qcore_unix_p.h b/src/corelib/kernel/qcore_unix_p.h
index 6342b03..f7f4767 100644
--- a/src/corelib/kernel/qcore_unix_p.h
+++ src/corelib/kernel/qcore_unix_p.h
@@ -71,6 +71,8 @@
 
 #if defined(Q_OS_VXWORKS)
 #  include <ioLib.h>
+#else
+#  include <poll.h>
 #endif
 
 struct sockaddr;
@@ -341,6 +343,36 @@ void qt_nanosleep(timespec amount);
 Q_CORE_EXPORT int qt_safe_select(int nfds, fd_set *fdread, fd_set *fdwrite, fd_set *fdexcept,
                                  const struct timeval *tv);
 
+#ifdef Q_OS_VXWORKS
+// Poll emulation for VxWorks.  Provided by <poll.h> on other systems.
+
+struct pollfd {
+  int fd;
+  short events;
+  short revents;
+};
+
+#define POLLIN 1
+#define POLLOUT 2
+#define POLLERR 4
+#define POLLHUP 8
+#define POLLNVAL 16
+#endif
+
+inline bool qt_readable(const pollfd &fd)
+{
+  return fd.fd >= 0 && (fd.revents & (POLLIN | POLLHUP | POLLERR | POLLNVAL)) != 0;
+}
+
+inline bool qt_writable(const pollfd &fd)
+{
+  return fd.fd >= 0 && (fd.revents & (POLLOUT | POLLHUP | POLLERR | POLLNVAL)) != 0;
+}
+
+// Deprecated due to FD_SETSIZE limitation, use qt_safe_poll instead.
+Q_CORE_EXPORT int qt_safe_poll(pollfd *fds, int nfds, int timeout,
+                               bool retry_eintr = true);
+
 // according to X/OPEN we have to define semun ourselves
 // we use prefix as on some systems sem.h will have it
 struct semid_ds;
diff --git a/src/network/socket/qlocalserver_unix.cpp b/src/network/socket/qlocalserver_unix.cpp
index 2bcf1ac..efb8128 100644
--- a/src/network/socket/qlocalserver_unix.cpp
+++ src/network/socket/qlocalserver_unix.cpp
@@ -293,16 +293,11 @@ void QLocalServerPrivate::_q_onNewConnection()
 
 void QLocalServerPrivate::waitForNewConnection(int msec, bool *timedOut)
 {
-    fd_set readfds;
-    FD_ZERO(&readfds);
-    FD_SET(listenSocket, &readfds);
+    struct pollfd fd;
+    fd.fd = listenSocket;
+    fd.events = POLLIN;
 
-    timeval timeout;
-    timeout.tv_sec = msec / 1000;
-    timeout.tv_usec = (msec % 1000) * 1000;
-
-    int result = -1;
-    result = qt_safe_select(listenSocket + 1, &readfds, 0, 0, (msec == -1) ? 0 : &timeout);
+    int result = qt_safe_poll(&fd, 1, msec);
     if (-1 == result) {
         setError(QLatin1String("QLocalServer::waitForNewConnection"));
         closeServer();
diff --git a/src/network/socket/qlocalsocket_unix.cpp b/src/network/socket/qlocalsocket_unix.cpp
index 49eb71a..c598c2b 100644
--- a/src/network/socket/qlocalsocket_unix.cpp
+++ src/network/socket/qlocalsocket_unix.cpp
@@ -56,10 +56,6 @@
 #include <qdebug.h>
 #include <qelapsedtimer.h>
 
-#ifdef Q_OS_VXWORKS
-#  include <selectLib.h>
-#endif
-
 #define QT_CONNECT_TIMEOUT 30000
 
 QT_BEGIN_NAMESPACE
@@ -524,25 +520,16 @@ bool QLocalSocket::waitForConnected(int msec)
     if (state() != ConnectingState)
         return (state() == ConnectedState);
 
-    fd_set fds;
-    FD_ZERO(&fds);
-    FD_SET(d->connectingSocket, &fds);
-
-    timeval timeout;
-    timeout.tv_sec = msec / 1000;
-    timeout.tv_usec = (msec % 1000) * 1000;
+    pollfd fd;
+    fd.fd = d->connectingSocket;
+    fd.events = POLLIN | POLLOUT;
 
-    // timeout can not be 0 or else select will return an error.
-    if (0 == msec)
-        timeout.tv_usec = 1000;
-
-    int result = -1;
-    // on Linux timeout will be updated by select, but _not_ on other systems.
+    int result;
     QElapsedTimer timer;
+    int remaining = msec > 0 ? msec : 1000;
     timer.start();
-    while (state() == ConnectingState
-           && (-1 == msec || timer.elapsed() < msec)) {
-        result = ::select(d->connectingSocket + 1, &fds, 0, 0, &timeout);
+    while (state() == ConnectingState) {
+	result = qt_safe_poll(&fd, 1, remaining, /* retry_eintr */ false);
         if (-1 == result && errno != EINTR) {
             d->errorOccurred( QLocalSocket::UnknownSocketError,
                     QLatin1String("QLocalSocket::waitForConnected"));
@@ -550,6 +537,11 @@ bool QLocalSocket::waitForConnected(int msec)
         }
         if (result > 0)
             d->_q_connectToSocket();
+        if (msec >= 0) {
+            remaining = timer.elapsed() - msec;
+            if (remaining < 0)
+                break;
+        }
     }
 
     return (state() == ConnectedState);
diff --git a/src/network/socket/qnativesocketengine_unix.cpp b/src/network/socket/qnativesocketengine_unix.cpp
index 4f3408b..a1bb298 100644
--- a/src/network/socket/qnativesocketengine_unix.cpp
+++ src/network/socket/qnativesocketengine_unix.cpp
@@ -1122,48 +1122,40 @@ qint64 QNativeSocketEnginePrivate::nativeRead(char *data, qint64 maxSize)
 
 int QNativeSocketEnginePrivate::nativeSelect(int timeout, bool selectForRead) const
 {
-    fd_set fds;
-    FD_ZERO(&fds);
-    FD_SET(socketDescriptor, &fds);
-
-    struct timeval tv;
-    tv.tv_sec = timeout / 1000;
-    tv.tv_usec = (timeout % 1000) * 1000;
-
-    int retval;
-    if (selectForRead)
-        retval = qt_safe_select(socketDescriptor + 1, &fds, 0, 0, timeout < 0 ? 0 : &tv);
-    else
-        retval = qt_safe_select(socketDescriptor + 1, 0, &fds, 0, timeout < 0 ? 0 : &tv);
-
-    return retval;
+    struct pollfd fd;
+    fd.fd = socketDescriptor;
+    if (selectForRead) {
+	fd.events = POLLIN;
+    } else {
+	fd.events = POLLOUT;
+    }
+    return qt_safe_poll(&fd, 1, timeout);
 }
 
 int QNativeSocketEnginePrivate::nativeSelect(int timeout, bool checkRead, bool checkWrite,
                        bool *selectForRead, bool *selectForWrite) const
 {
-    fd_set fdread;
-    FD_ZERO(&fdread);
+    struct pollfd fd;
+    fd.fd = socketDescriptor;
     if (checkRead)
-        FD_SET(socketDescriptor, &fdread);
-
-    fd_set fdwrite;
-    FD_ZERO(&fdwrite);
+	fd.events =  POLLIN;
+    else
+	fd.events = 0;
     if (checkWrite)
-        FD_SET(socketDescriptor, &fdwrite);
-
-    struct timeval tv;
-    tv.tv_sec = timeout / 1000;
-    tv.tv_usec = (timeout % 1000) * 1000;
-
-    int ret;
-    ret = qt_safe_select(socketDescriptor + 1, &fdread, &fdwrite, 0, timeout < 0 ? 0 : &tv);
-
+	fd.events |= POLLOUT;
+    int ret = qt_safe_poll(&fd, 1, timeout);
     if (ret <= 0)
-        return ret;
-    *selectForRead = FD_ISSET(socketDescriptor, &fdread);
-    *selectForWrite = FD_ISSET(socketDescriptor, &fdwrite);
-
+	return ret;
+    bool r = (fd.revents & (POLLIN | POLLHUP | POLLERR)) != 0;
+    bool w = (fd.revents & (POLLOUT | POLLHUP | POLLERR)) != 0;
+    // Emulate the return value from select(2).
+    ret = 0;
+    if (r)
+	++ret;
+    if (w)
+	++ret;
+    *selectForRead = r;
+    *selectForWrite = w;
     return ret;
 }
 
 
